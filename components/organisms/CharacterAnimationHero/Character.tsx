/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/Character.glb --types
*/

import * as THREE from 'three';
import React, { useRef, useEffect, useState, useMemo } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF, SkeletonUtils } from 'three-stdlib';
import { useGraph } from '@react-three/fiber';

interface props {
  readonly model: string;
  readonly actionIndex: number;
}

type GLTFResult = GLTF & {
  nodes: {
    Character: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
};

type ActionName = 'Armature|mixamo.com|Layer0' | 'danceAnimation';
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

const Character = ({ model, actionIndex }: props) => {
  const group = useRef<THREE.Group>();
  const { scene, animations } = useGLTF(model) as GLTFResult;
  const { ref, actions, names } = useAnimations<GLTFActions>(animations, group);

  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone);

  // Change animation when the index changes
  useEffect(() => {
    // Reset and fade in animation after an index has been changed
    actions[names[actionIndex]].reset().fadeIn(0.5).play();
    // In the clean-up phase, fade it out
    return () => actions[names[actionIndex]].fadeOut(0.5);
  }, [actions, actionIndex, names]);

  return (
    <group ref={group} dispose={null}>
      <group name="Scene">
        <group
          name="Armature"
          scale={[2.5, 2.5, 2.5]}
          position={[0, -7, 0]}
          rotation={[Math.PI / 2, 0, 0]}
        >
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="Character"
            geometry={nodes.Character.geometry}
            material={nodes.Character.material}
            skeleton={nodes.Character.skeleton}
          />
        </group>
      </group>
    </group>
  );
};

export default Character;

useGLTF.preload('/Character.glb');
